GREP(1) 							       GREP(1)



NNAAMMEE
       grep, egrep, fgrep - print lines matching a pattern

SSYYNNOOPPSSIISS
       ggrreepp [_o_p_t_i_o_n_s] _P_A_T_T_E_R_N [_F_I_L_E...]
       ggrreepp [_o_p_t_i_o_n_s] [--ee _P_A_T_T_E_R_N | --ff _F_I_L_E] [_F_I_L_E...]

DDEESSCCRRIIPPTTIIOONN
       GGrreepp  searches the named input _F_I_L_Es (or standard input if no files are
       named, or the file name -- is given) for lines containing a match to the
       given _P_A_T_T_E_R_N.  By default, ggrreepp prints the matching lines.

       In addition, two variant programs eeggrreepp and ffggrreepp are available.  EEggrreepp
       is the same as ggrreepp --EE.	FFggrreepp is the same as ggrreepp --FF.

OOPPTTIIOONNSS
       --AA _N_U_M, ----aafftteerr--ccoonntteexxtt==_N_U_M
	      Print _N_U_M  lines	of  trailing  context  after  matching	lines.
	      Places  a  line  containing  ----  between	contiguous  groups  of
	      matches.

       --aa, ----tteexxtt
	      Process a binary file as if it were text; this is equivalent  to
	      the ----bbiinnaarryy--ffiilleess==tteexxtt option.

       --BB _N_U_M, ----bbeeffoorree--ccoonntteexxtt==_N_U_M
	      Print  _N_U_M  lines  of  leading  context  before  matching lines.
	      Places  a  line  containing  ----  between	contiguous  groups  of
	      matches.

       --CC _N_U_M, ----ccoonntteexxtt==_N_U_M
	      Print  _N_U_M lines of output context.  Places a line containing ----
	      between contiguous groups of matches.

       --bb, ----bbyyttee--ooffffsseett
	      Print the byte offset within the input file before each line  of
	      output.

       ----bbiinnaarryy--ffiilleess==_T_Y_P_E
	      If the first few bytes of a file indicate that the file contains
	      binary data, assume that the file is of type _T_Y_P_E.  By  default,
	      _T_Y_P_E is bbiinnaarryy, and ggrreepp normally outputs either a one-line mes-
	      sage saying that a binary file matches, or no message  if  there
	      is  no  match.   If  _T_Y_P_E  is wwiitthhoouutt--mmaattcchh, ggrreepp assumes that a
	      binary file does not match; this is equivalent to the --II option.
	      If  _T_Y_P_E	is  tteexxtt,  ggrreepp  processes a binary file as if it were
	      text; this is  equivalent  to  the  --aa  option.	_W_a_r_n_i_n_g_:  ggrreepp
	      ----bbiinnaarryy--ffiilleess==tteexxtt  might output binary garbage, which can have
	      nasty side effects if the output is a terminal and if the termi-
	      nal driver interprets some of it as commands.

       ----ccoolloouurr[[==_W_H_E_N]_, ----ccoolloorr[[==_W_H_E_N]
	      Surround	the matching string with the marker find in GGRREEPP__CCOOLLOORR
	      environment variable. WHEN may be `never', `always', or `auto'

       --cc, ----ccoouunntt
	      Suppress normal output; instead print a count of matching  lines
	      for  each  input	file.  With the --vv, ----iinnvveerrtt--mmaattcchh option (see
	      below), count non-matching lines.

       --DD _A_C_T_I_O_N, ----ddeevviicceess==_A_C_T_I_O_N
	      If an input file is a device, FIFO  or  socket,  use  _A_C_T_I_O_N  to
	      process  it.   By  default,  _A_C_T_I_O_N  is  rreeaadd,  which means that
	      devices are read just as if they were ordinary files.  If _A_C_T_I_O_N
	      is sskkiipp, devices are silently skipped.

       --dd _A_C_T_I_O_N, ----ddiirreeccttoorriieess==_A_C_T_I_O_N
	      If  an  input file is a directory, use _A_C_T_I_O_N to process it.  By
	      default, _A_C_T_I_O_N is rreeaadd, which means that directories  are  read
	      just  as if they were ordinary files.  If _A_C_T_I_O_N is sskkiipp, direc-
	      tories are silently skipped.  If _A_C_T_I_O_N is rreeccuurrssee,  ggrreepp  reads
	      all  files under each directory, recursively; this is equivalent
	      to the --rr option.

       --EE, ----eexxtteennddeedd--rreeggeexxpp
	      Interpret _P_A_T_T_E_R_N as an extended regular expression (see below).

       --ee _P_A_T_T_E_R_N, ----rreeggeexxpp==_P_A_T_T_E_R_N
	      Use _P_A_T_T_E_R_N as the pattern; useful to protect patterns beginning
	      with --.

       --FF, ----ffiixxeedd--ssttrriinnggss
	      Interpret _P_A_T_T_E_R_N as a list of fixed strings, separated by  new-
	      lines, any of which is to be matched.

       --ff _F_I_L_E, ----ffiillee==_F_I_L_E
	      Obtain  patterns	from  _F_I_L_E, one per line.  The empty file con-
	      tains zero patterns, and therefore matches nothing.

       --GG, ----bbaassiicc--rreeggeexxpp
	      Interpret _P_A_T_T_E_R_N as a basic  regular  expression  (see  below).
	      This is the default.

       --HH, ----wwiitthh--ffiilleennaammee
	      Print the filename for each match.

       --hh, ----nnoo--ffiilleennaammee
	      Suppress	the  prefixing	of  filenames  on output when multiple
	      files are searched.

       ----hheellpp Output a brief help message.

       --II     Process a binary file as if it did not  contain  matching  data;
	      this is equivalent to the ----bbiinnaarryy--ffiilleess==wwiitthhoouutt--mmaattcchh option.

       --ii, ----iiggnnoorree--ccaassee
	      Ignore  case  distinctions  in  both  the  _P_A_T_T_E_R_N and the input
	      files.

       --LL, ----ffiilleess--wwiitthhoouutt--mmaattcchh
	      Suppress normal output; instead print the  name  of  each  input
	      file from which no output would normally have been printed.  The
	      scanning will stop on the first match.

       --ll, ----ffiilleess--wwiitthh--mmaattcchheess
	      Suppress normal output; instead print the  name  of  each  input
	      file  from  which  output would normally have been printed.  The
	      scanning will stop on the first match.

       --mm _N_U_M, ----mmaaxx--ccoouunntt==_N_U_M
	      Stop reading a file after _N_U_M matching lines.  If the  input  is
	      standard	input  from a regular file, and _N_U_M matching lines are
	      output, ggrreepp ensures that the standard input  is	positioned  to
	      just  after the last matching line before exiting, regardless of
	      the presence of trailing context lines.  This enables a  calling
	      process  to resume a search.  When ggrreepp stops after _N_U_M matching
	      lines, it outputs any trailing context lines.  When  the	--cc  or
	      ----ccoouunntt  option  is  also  used,	ggrreepp  does  not output a count
	      greater than _N_U_M.  When the --vv or ----iinnvveerrtt--mmaattcchh option is  also
	      used, ggrreepp stops after outputting _N_U_M non-matching lines.

       ----mmmmaapp If  possible, use the mmmmaapp(2) system call to read input, instead
	      of the default rreeaadd(2) system call.  In some situations,	----mmmmaapp
	      yields  better performance.  However, ----mmmmaapp can cause undefined
	      behavior (including core dumps) if an input file	shrinks  while
	      ggrreepp is operating, or if an I/O error occurs.

       --nn, ----lliinnee--nnuummbbeerr
	      Prefix each line of output with the line number within its input
	      file.

       --oo, ----oonnllyy--mmaattcchhiinngg
	      Show only the part of a matching line that matches _P_A_T_T_E_R_N_.

       ----llaabbeell==_L_A_B_E_L
	      Displays input actually coming from standard input as input com-
	      ing  from  file _L_A_B_E_L_.  This is especially useful for tools like
	      zgrep, e.g.  ggzziipp --ccdd ffoooo..ggzz ||ggrreepp ----llaabbeell==ffoooo ssoommeetthhiinngg

       ----lliinnee--bbuuffffeerreedd
	      Turns on line buffering. However,  this  can  be	a  performance
	      penalty.

       --PP, ----ppeerrll--rreeggeexxpp
	      Interpret _P_A_T_T_E_R_N as a Perl regular expression.

       --qq, ----qquuiieett, ----ssiilleenntt
	      Quiet;  do  not write anything to standard output.  Exit immedi-
	      ately with zero status if any match is found, even if  an  error
	      was detected.  Also see the --ss or ----nnoo--mmeessssaaggeess option.

       --RR, --rr, ----rreeccuurrssiivvee
	      Read all files under each directory, recursively; this is equiv-
	      alent to the --dd rreeccuurrssee option.

	 ----iinncclluuddee==PATTERN
	      Recurse in directories only searching file matching _P_A_T_T_E_R_N_.

	 ----eexxcclluuddee==PATTERN
	      Recurse in directories skip file matching _P_A_T_T_E_R_N_.

       --ss, ----nnoo--mmeessssaaggeess
	      Suppress error messages about nonexistent or  unreadable	files.
	      Portability note: unlike GNU ggrreepp, traditional ggrreepp did not con-
	      form to POSIX.2, because traditional ggrreepp lacked a --qq option and
	      its  --ss option behaved like GNU ggrreepp's --qq option.  Shell scripts
	      intended to be portable to traditional ggrreepp should avoid both --qq
	      and --ss and should redirect output to /dev/null instead.

       --UU, ----bbiinnaarryy
	      Treat  the  file(s) as binary.  By default, under MS-DOS and MS-
	      Windows, ggrreepp guesses the file type by looking at  the  contents
	      of  the first 32KB read from the file.  If ggrreepp decides the file
	      is a text file, it strips the CR characters  from  the  original
	      file  contents  (to  make  regular expressions with ^^ and $$ work
	      correctly).  Specifying --UU overrules this guesswork, causing all
	      files  to be read and passed to the matching mechanism verbatim;
	      if the file is a text file with CR/LF pairs at the end  of  each
	      line,  this  will  cause some regular expressions to fail.  This
	      option has no effect on platforms other than MS-DOS and  MS-Win-
	      dows.

       --uu, ----uunniixx--bbyyttee--ooffffsseettss
	      Report  Unix-style  byte	offsets.   This  switch causes ggrreepp to
	      report byte offsets as if the file were  Unix-style  text  file,
	      i.e. with CR characters stripped off.  This will produce results
	      identical to running ggrreepp on a Unix machine.  This option has no
	      effect  unless --bb option is also used; it has no effect on plat-
	      forms other than MS-DOS and MS-Windows.

       --VV, ----vveerrssiioonn
	      Print the version number of ggrreepp to standard error.   This  ver-
	      sion number should be included in all bug reports (see below).

       --vv, ----iinnvveerrtt--mmaattcchh
	      Invert the sense of matching, to select non-matching lines.

       --ww, ----wwoorrdd--rreeggeexxpp
	      Select  only  those  lines  containing  matches  that form whole
	      words.  The test is that the matching substring must  either  be
	      at  the  beginning  of  the line, or preceded by a non-word con-
	      stituent character.  Similarly, it must be either at the end  of
	      the line or followed by a non-word constituent character.  Word-
	      constituent characters are letters, digits, and the  underscore.

       --xx, ----lliinnee--rreeggeexxpp
	      Select only those matches that exactly match the whole line.

       --yy     Obsolete synonym for --ii.

       --ZZ, ----nnuullll
	      Output  a  zero  byte  (the  ASCII NNUULL character) instead of the
	      character that normally follows a file name.  For example,  ggrreepp
	      --llZZ  outputs  a  zero  byte  after each file name instead of the
	      usual newline.  This option makes the output  unambiguous,  even
	      in the presence of file names containing unusual characters like
	      newlines.  This option can  be  used  with  commands  like  ffiinndd
	      --pprriinntt00,	ppeerrll  --00,  ssoorrtt  --zz, and xxaarrggss --00 to process arbitrary
	      file names, even those that contain newline characters.

RREEGGUULLAARR EEXXPPRREESSSSIIOONNSS
       A regular expression is a pattern that  describes  a  set  of  strings.
       Regular	expressions  are constructed analogously to arithmetic expres-
       sions, by using various operators to combine smaller expressions.

       GGrreepp understands two different versions of regular  expression  syntax:
       "basic"	and "extended."  In GNU ggrreepp, there is no difference in avail-
       able functionality using  either  syntax.   In  other  implementations,
       basic regular expressions are less powerful.  The following description
       applies to extended regular expressions; differences for basic  regular
       expressions are summarized afterwards.

       The  fundamental building blocks are the regular expressions that match
       a single character.  Most characters, including all letters and digits,
       are  regular expressions that match themselves.	Any metacharacter with
       special meaning may be quoted by preceding it with a backslash.

       A _b_r_a_c_k_e_t _e_x_p_r_e_s_s_i_o_n is a list of characters enclosed by [[ and  ]].   It
       matches	any  single  character in that list; if the first character of
       the list is the caret ^^ then it matches any character _n_o_t in the  list.
       For  example,  the  regular  expression [[00112233445566778899]] matches any single
       digit.

       Within a bracket expression, a _r_a_n_g_e _e_x_p_r_e_s_s_i_o_n consists of two charac-
       ters separated by a hyphen.  It matches any single character that sorts
       between the two characters, inclusive,  using  the  locale's  collating
       sequence  and  character  set.	For  example, in the default C locale,
       [[aa--dd]] is equivalent to [[aabbccdd]].  Many locales sort characters in dictio-
       nary  order,  and in these locales [[aa--dd]] is typically not equivalent to
       [[aabbccdd]]; it might be equivalent to [[aaBBbbCCccDDdd]], for  example.   To	obtain
       the  traditional interpretation of bracket expressions, you can use the
       C locale by setting the LLCC__AALLLL environment variable to the value CC.

       Finally, certain named classes  of  characters  are  predefined	within
       bracket expressions, as follows.  Their names are self explanatory, and
       they  are  [[::aallnnuumm::]],  [[::aallpphhaa::]],  [[::ccnnttrrll::]],   [[::ddiiggiitt::]],   [[::ggrraapphh::]],
       [[::lloowweerr::]],  [[::pprriinntt::]], [[::ppuunncctt::]], [[::ssppaaccee::]], [[::uuppppeerr::]], and [[::xxddiiggiitt::]]..
       For example, [[[[::aallnnuumm::]]]] means  [[00--99AA--ZZaa--zz]],  except  the  latter  form
       depends upon the C locale and the ASCII character encoding, whereas the
       former is independent of locale and  character  set.   (Note  that  the
       brackets  in these class names are part of the symbolic names, and must
       be included in addition to the brackets delimiting the  bracket	list.)
       Most  metacharacters  lose  their  special  meaning  inside  lists.  To
       include a literal ]] place it first in the list.	Similarly, to  include
       a literal ^^ place it anywhere but first.  Finally, to include a literal
       -- place it last.

       The period ..  matches any single character.  The symbol \\ww is a synonym
       for [[[[::aallnnuumm::]]]] and \\WW is a synonym for [[^^[[::aallnnuumm]]]].

       The  caret ^^ and the dollar sign $$ are metacharacters that respectively
       match the empty string at the beginning and end of a line.  The symbols
       \\<<  and \\>> respectively match the empty string at the beginning and end
       of a word.  The symbol \\bb matches the empty string at  the  edge  of  a
       word,  and \\BB matches the empty string provided it's _n_o_t at the edge of
       a word.

       A regular expression may be followed by one of several repetition oper-
       ators:
       ??      The preceding item is optional and matched at most once.
       **      The preceding item will be matched zero or more times.
       ++      The preceding item will be matched one or more times.
       {{_n}}    The preceding item is matched exactly _n times.
       {{_n,,}}   The preceding item is matched _n or more times.
       {{_n,,_m}}  The  preceding  item  is	matched at least _n times, but not more
	      than _m times.

       Two regular expressions may  be	concatenated;  the  resulting  regular
       expression  matches  any  string formed by concatenating two substrings
       that respectively match the concatenated subexpressions.

       Two regular expressions may be joined by  the  infix  operator  ||;  the
       resulting  regular expression matches any string matching either subex-
       pression.

       Repetition takes precedence over concatenation,	which  in  turn  takes
       precedence  over alternation.  A whole subexpression may be enclosed in
       parentheses to override these precedence rules.

       The backreference \\_n, where _n is a single digit, matches the  substring
       previously  matched by the _nth parenthesized subexpression of the regu-
       lar expression.

       In basic regular expressions the metacharacters ??, ++, {{, ||,  ((,	and  ))
       lose  their  special  meaning; instead use the backslashed versions \\??,
       \\++, \\{{, \\||, \\((, and \\)).

       Traditional eeggrreepp did not support the {{ metacharacter, and  some  eeggrreepp
       implementations	support \\{{ instead, so portable scripts should avoid {{
       in eeggrreepp patterns and should use [[{{]] to match a literal {{.

       GNU eeggrreepp attempts to support traditional usage by assuming that  {{  is
       not  special if it would be the start of an invalid interval specifica-
       tion.  For example, the shell command eeggrreepp ''{{11'' searches for the  two-
       character  string {{11 instead of reporting a syntax error in the regular
       expression.  POSIX.2 allows this behavior as an extension, but portable
       scripts should avoid it.

       For more information see _r_e___f_o_r_m_a_t(7).

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       Grep's behavior is affected by the following environment variables.

       A  locale  LLCC___f_o_o is specified by examining the three environment vari-
       ables LLCC__AALLLL, LLCC___f_o_o, LLAANNGG, in that order.  The first  of  these  vari-
       ables  that is set specifies the locale.  For example, if LLCC__AALLLL is not
       set, but LLCC__MMEESSSSAAGGEESS is set to pptt__BBRR, then Brazilian Portuguese is used
       for  the  LLCC__MMEESSSSAAGGEESS  locale.	The  C locale is used if none of these
       environment variables  are  set,  or  if  the  locale  catalog  is  not
       installed,  or  if ggrreepp was not compiled with national language support
       (NLS).

       GGRREEPP__OOPPTTIIOONNSS
	      This variable specifies default options to be placed in front of
	      any   explicit   options.    For	example,  if  GGRREEPP__OOPPTTIIOONNSS  is
	      ''----bbiinnaarryy--ffiilleess==wwiitthhoouutt--mmaattcchh ----ddiirreeccttoorriieess==sskkiipp'', ggrreepp  behaves
	      as  if the two options ----bbiinnaarryy--ffiilleess==wwiitthhoouutt--mmaattcchh and ----ddiirreecc--
	      ttoorriieess==sskkiipp had been  specified  before  any  explicit  options.
	      Option  specifications are separated by whitespace.  A backslash
	      escapes the next character, so it can  be  used  to  specify  an
	      option containing whitespace or a backslash.

       GGRREEPP__CCOOLLOORR
	      Specifies the marker for highlighting.

       LLCC__AALLLL, LLCC__CCOOLLLLAATTEE, LLAANNGG
	      These  variables specify the LLCC__CCOOLLLLAATTEE locale, which determines
	      the collating sequence used to interpret range expressions  like
	      [[aa--zz]].

       LLCC__AALLLL, LLCC__CCTTYYPPEE, LLAANNGG
	      These  variables	specify  the LLCC__CCTTYYPPEE locale, which determines
	      the type of characters, e.g., which characters are whitespace.

       LLCC__AALLLL, LLCC__MMEESSSSAAGGEESS, LLAANNGG
	      These variables specify the LLCC__MMEESSSSAAGGEESS locale, which determines
	      the  language that ggrreepp uses for messages.  The default C locale
	      uses American English messages.

       PPOOSSIIXXLLYY__CCOORRRREECCTT
	      If set,  ggrreepp  behaves  as  POSIX.2  requires;  otherwise,  ggrreepp
	      behaves  more  like  other  GNU programs.  POSIX.2 requires that
	      options that follow file names must be treated as file names; by
	      default,	such  options are permuted to the front of the operand
	      list and are treated as options.	Also,  POSIX.2	requires  that
	      unrecognized  options  be diagnosed as "illegal", but since they
	      are not really against the law the default is to	diagnose  them
	      as   "invalid".	PPOOSSIIXXLLYY__CCOORRRREECCTT  also  disables  ___N__GGNNUU__nnoonnoopp--
	      ttiioonn__aarrggvv__ffllaaggss__, described below.

       ___N__GGNNUU__nnoonnooppttiioonn__aarrggvv__ffllaaggss__
	      (Here _N is ggrreepp's numeric process ID.)  If the _ith character  of
	      this  environment variable's value is 11, do not consider the _ith
	      operand of ggrreepp to be an option, even if it appears to  be  one.
	      A  shell	can put this variable in the environment for each com-
	      mand it runs, specifying which operands are the results of  file
	      name  wildcard  expansion and therefore should not be treated as
	      options.	This  behavior	is  available  only  with  the	GNU  C
	      library, and only when PPOOSSIIXXLLYY__CCOORRRREECCTT is not set.

DDIIAAGGNNOOSSTTIICCSS
       Normally, exit status is 0 if selected lines are found and 1 otherwise.
       But the exit status is 2 if an error occurred, unless the --qq or ----qquuiieett
       or ----ssiilleenntt option is used and a selected line is found.

BBUUGGSS
       Email  bug  reports  to	bbuugg--ggnnuu--uuttiillss@@ggnnuu..oorrgg.	Be sure to include the
       word "grep" somewhere in the "Subject:" field.

       Large repetition counts in the {{_n,,_m}} construct may cause  grep  to  use
       lots of memory.	In addition, certain other obscure regular expressions
       require exponential time and space, and may cause ggrreepp to  run  out  of
       memory.

       Backreferences are very slow, and may require exponential time.



GNU Project			  2002/01/22			       GREP(1)
